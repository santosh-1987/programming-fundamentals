{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-programming-fundamentals","title":"Welcome to Programming Fundamentals","text":"<p>We are techies with a passion for technology and solving problems.</p> <p>We want to help self &amp; engineers like you who are keen to explore and develop</p> <ul> <li>Engage in constructive discussions</li> <li>Share Tips, Tricks</li> <li>\u2728Learn Programming Fundamentals\u2728</li> </ul>"},{"location":"#our-motto","title":"Our Motto","text":"<p>Should not give up and we should not allow the problem to defeat us.</p> <p>Try yourself before reaching out for help.</p>"},{"location":"#programming-construct","title":"Programming Construct","text":"<ul> <li>Concepts of Programming Construct.</li> </ul>"},{"location":"#search-algorithms","title":"Search Algorithms","text":"<ul> <li>Linear search</li> <li>Binary Search</li> </ul>"},{"location":"#bit-manipulation","title":"Bit Manipulation","text":"<ul> <li>Logical Operator Manipulation</li> <li>Shift Operators</li> </ul>"},{"location":"#problem-solving-time-complexity-space-complexity","title":"Problem Solving / Time Complexity / Space Complexity","text":"<ul> <li>Time Complexity<ul> <li>Time Complexity</li> <li>Space Complexity</li> </ul> </li> <li>Problem Solving<ul> <li>P.S Introduction</li> </ul> </li> </ul>"},{"location":"#data-structures","title":"Data Structures","text":"<ul> <li>Arrays<ul> <li>Introduction to Arrays</li> <li>Maths</li> <li>Prefix Sum</li> <li>Carry Forward</li> <li>Sliding Window</li> <li>Sub Arrays</li> <li>2D Matrices</li> <li>Interview Problems</li> <li>Arrays Advanced Problems</li> </ul> </li> <li>Strings<ul> <li>Introduction</li> </ul> </li> <li>Hashing<ul> <li>Introduction</li> </ul> </li> </ul>"},{"location":"#algorithms","title":"Algorithms","text":"<ul> <li>Manachers Algorithm</li> <li>Kadanes Algorithm</li> </ul>"},{"location":"#design-patterns","title":"Design Patterns","text":"<ul> <li>Coming Soon</li> </ul>"},{"location":"#how-we-accomplish-this","title":"How we accomplish this?","text":"<ul> <li>Learn and understand concepts</li> <li>Code and Review</li> <li>Project's related to concepts</li> </ul>"},{"location":"#important-links","title":"Important Links","text":"<ul> <li>SOLID Principles</li> <li>Interfaces in Python</li> <li>Interfaces and abstract classes in c++</li> </ul>"},{"location":"#know-us","title":"Know us","text":"<p>About Me</p>"},{"location":"TimeComplexity/time_and_space_complexity/","title":"Space Complexity","text":""},{"location":"TimeComplexity/time_and_space_complexity/#time-space-complexity-with-bigo-notation-asymptotic-analysis","title":"Time &amp; Space Complexity with Big(O) Notation - Asymptotic Analysis","text":"<p>Time complexity is the amount of time taken by an algorithm to run, as a function of the length of the input. It measures the time taken to execute each statement of code in an algorithm.</p> <p>Space and Time define any physical object in the Universe. Similarly, Space and Time complexity can define the effectiveness of an algorithm.</p> <p>While we know there is more than one way to solve the problem in programming, knowing how the algorithm works efficiently can add value to the way we do programming. To find the effectiveness of the program/algorithm, knowing how to evaluate them using Space and Time complexity can make the program behave in required optimal conditions, and by doing so, it makes us efficient programmers.</p>"},{"location":"TimeComplexity/time_and_space_complexity/#type-of-timecomplexity","title":"Type of TimeComplexity","text":"<ol> <li>Constant time \u2013 O (1)</li> <li>Linear time \u2013 O (n)</li> <li>Logarithmic time \u2013 O (log n)</li> <li>Quadratic time \u2013 O (n^2)</li> <li>Cubic time \u2013 O (n^3)</li> <li>Complex notations like Exponential time, Quasilinear time, factorial time, etc. are used based on the type of    functions defined.</li> </ol>"},{"location":"TimeComplexity/time_and_space_complexity/#asymptotic-analysis","title":"Asymptotic Analysis","text":"<p>Performance of your Algorithm for very large input, used to describe the running time of an algorithm - how much time an algorithm takes with a given input, n.</p> <ul> <li>Big O</li> <li>Omega (\u03a9)</li> <li>Theta (\u0398)</li> </ul> <p></p>"},{"location":"TimeComplexity/time_and_space_complexity/#space-complexity","title":"Space Complexity","text":"<p>Used to determine the extra space used in a Program.</p> <ul> <li>Char - 1 Byte</li> <li>Float - 4 Bytes</li> <li>Int - 4Bytes</li> <li>Long - 8Bytes</li> <li>double - 8Bytes</li> </ul> <pre><code>        Size of char:1byte\nSize of int:4bytes\nSize of short int:2bytes\nSize of long int:8bytes\nSize of signed long int:8bytes\nSize of unsigned long int:8bytes\nSize of float:4bytes\nSize of double:8bytes\nSize of wchar_t:4bytes\n</code></pre> <ul> <li>Linear Search   </li> <li>Problem 1   </li> <li>Problem 2(Advanced)    </li> </ul>"},{"location":"TimeComplexity/time_and_space_complexity/#time-limit-exceededtle","title":"Time Limit Exceeded(TLE)","text":"<p>Your Code is taking more than expected time. Solution: Reduce number of Iterations(Optimization)</p>"},{"location":"TimeComplexity/time_and_space_complexity/#tips-tricks","title":"Tips &amp; Tricks","text":"<ul> <li>Use Desmos Graphical Calculator for graphical view</li> <li>It doesnt matter where your code in running (env, devices), We can say that it is right to compare the number of   iterations instead of execution time. as number of iteration is going to stay the same across env, devices.</li> </ul>"},{"location":"TimeComplexity/time_complexity_basics/","title":"Time Complexity","text":""},{"location":"TimeComplexity/time_complexity_basics/#time-complexity","title":"Time Complexity","text":"<ul> <li>Imagine a classroom of 100 students in which you gave your pen to one person. Now, you want that pen. Here are some   ways to find the pen and what the O order is.     - O(n2): You go and ask the first person of the class, if he has the pen. Also, you ask this person about other 99       people in the classroom if they have that pen and so on, This is what we call O(n2).     - O(n): Going and asking each student individually is O(N).     - O(log n): Now I divide the class into two groups, then ask: \u201cIs it on the left side, or the right side of the       classroom?\u201d Then I take that group and divide it into two and ask again, and so on. Repeat the process till you       are left with one student who has your pen. This is what you mean by O(log n).     - I might need to do the O(n2) search if only one student knows on which student the pen is hidden. I\u2019d use the O(n)       if one student had the pen and only they knew it. I\u2019d use the O(log n) search if all the students knew, but would       only tell me if I guessed the right side.</li> </ul>"},{"location":"TimeComplexity/time_complexity_basics/#prerequisite","title":"Prerequisite","text":"<ul> <li>Understanding of Logarithms</li> </ul>"},{"location":"TimeComplexity/time_complexity_basics/#logarithms","title":"Logarithms","text":"<p>Logarithm is the way to represent exponential expression as shown in the example .</p> <ul> <li>ay = x is a exponential expression, it can also be written as loga x = y</li> <li>25 = 32, can be written as log232 = 5</li> <li>logx N , It means how many time N should be divided by x to make it 1.</li> </ul>"},{"location":"TimeComplexity/time_complexity_basics/#arithmetic-progressionap","title":"Arithmetic Progression(AP)","text":"<p>An arithmetic progression (AP) is a sequence where the differences between every two consecutive terms are the same.  </p> <p>nth term of an AP::</p> <ul> <li>an = a + (n - 1)d</li> </ul> <p>Sum of N term in AP </p>"},{"location":"TimeComplexity/time_complexity_basics/#geometric-progressionap","title":"Geometric Progression(AP)","text":""},{"location":"TimeComplexity/time_complexity_basics/#problems","title":"Problems","text":"<ul> <li>Problem 1   </li> <li>Problem 2   </li> <li>Problem 3   </li> <li>Problem 4   </li> <li>Problem 5   </li> <li>Problem 6   </li> <li>Problem 7   </li> <li>Problem 8   </li> <li>Problem 9   </li> <li>Problem 10 </li> <li>Problem 11 </li> </ul>"},{"location":"TimeComplexity/time_complexity_basics/#how-to-calculate-big-o","title":"How to calculate Big O","text":""},{"location":"TimeComplexity/time_complexity_basics/#tips-tricks","title":"Tips &amp; Tricks","text":"<ul> <li>[a,b] -&gt; Including a &amp; b. Number of Terms - <code>b-a+1</code></li> <li>(a,b) -&gt; Excluding a &amp; b.</li> <li>For Big O Notation     - Ignore all lower order terms     - Ignore all constant coefficient terms.     - Draw Table if you are confused with finding Big T.C</li> </ul>"},{"location":"algorithms/kadanes_algorithm/","title":"Kadanes Algorithm","text":""},{"location":"algorithms/kadanes_algorithm/#problem-statement-maximum-subarray-sum","title":"Problem Statement - Maximum Subarray Sum","text":"<p>Subarrays are arrays inside another array which only contains contiguous elements.</p> <p>Given an array of integers, the task is to find the maximum subarray sum possible of all the non-empty subarrays.</p> <p></p>"},{"location":"algorithms/kadanes_algorithm/#example","title":"Example:","text":"<p><pre><code>Input: [-3, -4, 5, -1, 2, -4, 6, -1]\nOutput: 8\nExplanation: Subarray [5, -1, 2, -4, 6] is the max sum contiguous subarray with sum 8.\n\nInput: [-2, 3, -1, 2]\nOutput: 4\nExplanation: Subarray [3, -1, 2] is the max sum contiguous subarray with sum 4.\n</code></pre> We would be solving the problem by following approaches \u2013</p> <ul> <li>Simple approach</li> <li>Efficient Approach: Kadane\u2019s Algorithm</li> </ul>"},{"location":"algorithms/kadanes_algorithm/#kadanes-algorithm-is-an-iterative-dynamic-programming-algorithm","title":"Kadane\u2019s Algorithm is an iterative dynamic programming algorithm.","text":"<p>It calculates the maximum sum subarray ending at a particular position by using the maximum sum subarray ending at the previous position. Follow the below steps to solve the problem.</p> <ul> <li>Define two-variable currSum which stores maximum sum ending here and maxSum which stores maximum sum so far.</li> <li>Initialize currSum with 0 and maxSum with INT_MIN.</li> <li>Now, iterate over the array and add the value of the current element to currSum and check<ul> <li>If currSum is greater than maxSum, update maxSum equals to currSum.</li> <li>If currSum is less than zero, make currSum equal to zero.</li> </ul> </li> <li>Finally, print the value of maxSum.</li> </ul> <p></p>"},{"location":"algorithms/manachers_algorithm/","title":"Manachers Algorithm","text":""},{"location":"algorithms/manachers_algorithm/#manachers-algorithm-linear-time-longest-palindromic-substring","title":"Manacher\u2019s Algorithm \u2013 Linear Time Longest Palindromic Substring","text":"<p>Given a string, find the longest substring which is palindrome.</p>"},{"location":"algorithms/manachers_algorithm/#statement","title":"Statement","text":"<p>Given string  with length . Find all the pairs  such that substring  is a palindrome. String  is a palindrome when  ( is a reversed string for ).</p>"},{"location":"algorithms/manachers_algorithm/#more-precise-statement","title":"More precise statement","text":"<p>In the worst case string might have up to  palindromic substrings, and at the first glance it seems that there is no linear algorithm for this problem.</p> <p>But the information about the palindromes can be kept in a compact way: for each position  we will find the number of non-empty palindromes centered at this position.</p> <p>Palindromes with a common center form a contiguous chain, that is if we have a palindrome of length  centered in , we also have palindromes of lengths ,  and so on also centered in . Therefore, we will collect the information about all palindromic substrings in this way.</p> <p>Palindromes of odd and even lengths are accounted for separately as  and . For the palindromes of even length we assume that they're centered in the position  if their two central characters are  and .</p>"},{"location":"algorithms/manachers_algorithm/#references","title":"References:","text":"<p>https://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-1/</p>"},{"location":"arrays/array_carry_forward/","title":"Carry Forward Technique","text":""},{"location":"arrays/array_carry_forward/#arrays-carry-forward","title":"Arrays - Carry Forward","text":"<p>Carry forward technique on array is used when we want to skip any element of the array while performing some operations.</p>"},{"location":"arrays/array_carry_forward/#example","title":"Example:","text":"<ul> <li>PS Odd</li> <li>PS Even</li> <li>Left Max Array(Maximum of all values in the given array from index 0 to i )</li> <li>Right Max Array(Maximum of all Values in the given array from i to N-1) [i,N-1]</li> </ul> <p>Left Max: Right Max: </p>"},{"location":"arrays/array_carry_forward/#problem-1","title":"PROBLEM 1","text":"<p> Bruteforce: Optimized Solution: </p>"},{"location":"arrays/array_carry_forward/#problem-2","title":"PROBLEM 2","text":"<p> Observation </p> <p>Optimized: Solution:</p> <pre><code>module.exports = {\n//param A : array of integers\n//return an integer\nsolve: function (A) {\nlet minValue = Number.MAX_VALUE;\nlet maxValue = Number.MIN_VALUE;\nlet n = A.length;\nfor (let i = 0; i &lt; n; i++) {\nminValue = Math.min(minValue, A[i]);\nmaxValue = Math.max(maxValue, A[i]);\n}\n\nlet pos_min = -1, pos_max = -1, ans = Number.MAX_VALUE;\n\n\nfor (let i = 0; i &lt; n; i++) {\n\nif (A[i] == minValue)\npos_min = i;\n\nif (A[i] == maxValue)\npos_max = i;\n\nif (pos_max != -1 &amp;&amp; pos_min != -1)\nans = Math.min(ans, Math.abs(pos_min - pos_max) + 1);\n}\n\nreturn ans;\n}\n};\n</code></pre>"},{"location":"arrays/array_carry_forward/#problem-3-bulbs","title":"PROBLEM 3 - Bulbs","text":"<ul> <li>A wire connects N light bulbs. Each bulb has a switch associated with it; however, due to faulty wiring, a switch also   changes the state of all the bulbs to the right of the current bulb.</li> <li>Given an initial state of all bulbs, find the minimum number of switches you have to press to turn on all the bulbs.</li> <li> <p>You can press the same switch multiple times.     - Note: 0 represents the bulb is off and 1 represents the bulb is on.</p> <p> - BruteForce  - Optimized Solution <pre><code>// Java\npublic class Solution {\npublic int bulbs(ArrayList &lt; Integer &gt; A) {\n\nint state = 0, ans = 0;\n\n// state variable will represent the state which we have to change.\nfor (int i = 0; i &lt; A.size(); i++) {\n\nif (A.get(i) == state) {\nans++;\n// As we will switch this, all the bulbs on right side will also change. So, change state = 1 - state\nstate = 1 - state;\n}\n}\nreturn ans;\n}\n}\n</code></pre></p> </li> </ul> <pre><code>// Javascript\nmodule.exports = {\nbulbs: function (A) {\nlet state = 0,\nans = 0;\n\nfor (let i = 0; i &lt; A.length; i++) {\nif (A[i] == state) {\nans++;\nstate = 1 - state;\n}\n}\nreturn ans;\n},\n};\n</code></pre>"},{"location":"arrays/array_carry_forward/#window-sliding-technique","title":"Window Sliding Technique","text":"<p>Window Sliding Technique is a computational technique which aims to reduce the use of nested loop and replace it with a single loop, thereby reducing the time complexity.</p>"},{"location":"arrays/array_carry_forward/#what-is-sliding-window","title":"What is Sliding Window?","text":"<p>Consider a long chain connected together. Suppose you want to apply oil in the complete chain with your hands, without pouring the oil from above. One way to do so is to is to:</p> <ul> <li>pick some oil,</li> <li>apply onto a section of chain,</li> <li>then again pick some oil</li> <li>then apply it to the next section where oil is not applied yet</li> <li>and so on till the complete chain is oiled.</li> </ul> <p>Another way to do so, is to use a cloth, dip it in oil, and then hold onto one end of the chain with this cloth. Then instead of re-dipping it again and again, just slide the cloth with hand onto the next section, and next, and so on till the other end.</p> <p>The second way is known as the Sliding window technique and the portion which is slided from one end to end, is known as Sliding Window.</p> <p></p>"},{"location":"arrays/array_carry_forward/#prerequisite-to-use-sliding-window-technique","title":"Prerequisite to use Sliding window technique","text":"<p>The use of Sliding Window technique can be done in a very specific scenario, where the size of window for computation is fixed throughout the complete nested loop. Only then the time complexity can be reduced.</p>"},{"location":"arrays/array_carry_forward/#how-to-use-sliding-window-technique","title":"How to use Sliding Window Technique?","text":"<p>The general use of Sliding window technique can be demonstrated as following:</p> <ol> <li>Find the size of window required</li> <li>Compute the result for 1st window, i.e. from start of data structure</li> <li>Then use a loop to slide the window by 1, and keep computing the result window by window.</li> </ol>"},{"location":"arrays/array_carry_forward/#example_1","title":"Example:","text":"<ul> <li>Given an array of integers of size \u2018n\u2019, Our aim is to calculate the maximum sum of \u2018k\u2019 consecutive elements in the   array.</li> </ul> <pre><code>Input  : arr[] = {100, 200, 300, 400}, k = 2\nOutput : 700\n\nInput  : arr[] = {1, 4, 2, 10, 23, 3, 1, 0, 20}, k = 4\nOutput : 39\nWe get maximum sum by adding subarray {4, 2, 10, 23} of size 4.\n\nInput  : arr[] = {2, 3}, k = 3\nOutput : Invalid\nThere is no subarray of size 3 as size of whole array is 2.\n</code></pre> <p>Solution:</p> <pre><code>// Java code for\n// O(n) solution for finding\n// maximum sum of a subarray\n// of size k\nclass GFG {\n\n// Returns maximum sum in\n// a subarray of size k.\nstatic int maxSum(int arr[], int n, int k) {\n// n must be greater\nif (n &lt; k) {\nSystem.out.println(\"Invalid\");\nreturn -1;\n}\n\n// Compute sum of first window of size k\nint max_sum = 0;\nfor (int i = 0; i &lt; k; i++)\nmax_sum += arr[i];\n\n// Compute sums of remaining windows by\n// removing first element of previous\n// window and adding last element of\n// current window.\nint window_sum = max_sum;\nfor (int i = k; i &lt; n; i++) {\nwindow_sum += arr[i] - arr[i - k];\nmax_sum = Math.max(max_sum, window_sum);\n}\n\nreturn max_sum;\n}\n\n// Driver code\npublic static void main(String[] args) {\nint arr[] = {1, 4, 2, 10, 2, 3, 1, 0, 20};\nint k = 4;\nint n = arr.length;\nSystem.out.println(maxSum(arr, n, k));\n}\n}\n</code></pre>"},{"location":"arrays/array_carry_forward/#tips-tricks","title":"Tips &amp; Tricks","text":"<ul> <li>Learn the Concept , Don't remember.</li> </ul>"},{"location":"arrays/array_carry_forward/#references","title":"References","text":"<ul> <li>Geek For Geeks</li> </ul>"},{"location":"arrays/introduction/","title":"Introduction","text":""},{"location":"arrays/introduction/#arrays","title":"Arrays","text":"<p>An array is a collection of items stored at contiguous memory locations.</p> <p>The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).</p> <p> </p>"},{"location":"arrays/introduction/#advantages-of-using-arrays","title":"Advantages of using arrays:","text":"<ul> <li>Arrays allow random access to elements. This makes accessing elements by position faster.</li> <li>Arrays have better cache locality that makes a pretty big difference in performance.</li> <li>Arrays represent multiple data items of the same type using a single name.</li> </ul>"},{"location":"arrays/introduction/#disadvantages-of-using-arrays","title":"Disadvantages of using arrays:","text":"<ul> <li>You can\u2019t change the size i.e. once you have declared the array you can\u2019t change its size because of static memory   allocation.</li> <li>Here Insertion(s) and deletion(s) are difficult as the elements are stored in consecutive memory locations and the   shifting operation is costly too.</li> </ul>"},{"location":"arrays/introduction/#applications-on-array","title":"Applications on Array","text":"<ul> <li>Array stores data elements of the same data type few languages like ruby, python can store different type of daata in   array.</li> <li>Arrays can be used for CPU scheduling.</li> <li>Used to Implement other data structures like Stacks, Queues, Heaps, Hash tables, etc.</li> </ul>"},{"location":"arrays/introduction/#looping-through-array","title":"Looping through Array","text":"<pre><code>int[]a={1,2,3,4,0,98}\n\nfor(int i=0;i&lt;a.length;i++){\n    System.out.println(a[i])\n}\n</code></pre>"},{"location":"arrays/introduction/#dynamic-arrays","title":"Dynamic Arrays","text":"<ul> <li>Vector</li> <li>ArrayList</li> <li>List</li> <li>Array(Ruby,Python)</li> </ul>"},{"location":"arrays/introduction/#problems-solutions","title":"Problems &amp; Solutions","text":"<p>Array Problems</p>"},{"location":"arrays/maths/","title":"Maths","text":""},{"location":"arrays/maths/#arrays-maths","title":"Arrays &amp; Maths","text":"<p>Fundamentally, software engineering involves solving problems by writing code and designing software systems. Similarly, math, particularly proof-based math, involves solving problems by writing a series of correct statements in mathematical language.</p> <p>Few Points to Note:</p> <p>One must know how to solve Arithmetic and Binary Problems</p> <p>Probability &amp; Stat.</p> <p>Linear Algebra</p> <p>Logical consistency and correctness are of the utmost importance</p>"},{"location":"arrays/maths/#prime-numbers","title":"Prime Numbers","text":"<p>A prime number is a natural number greater than 1, which is only divisible by 1 and itself. First few prime numbers are : 2 3 5 7 11 13 17 19 23 \u2026..</p> <p>Some interesting fact about Prime numbers</p> <ul> <li>Two is the only even Prime number.</li> <li>Every prime number can be represented in form of 6n+1 or 6n-1 except the prime number 2 and 3, where n is a natural   number.</li> <li>Two and Three are only two consecutive natural numbers that are prime.</li> </ul>"},{"location":"arrays/maths/#perfect-square","title":"Perfect Square","text":"<p>An integer that can be expressed as the square of another integer is called a perfect square. In other words, it is defined as the product of some integer with itself. </p>"},{"location":"arrays/maths/#factor-of-a-number","title":"Factor of a Number","text":"<p>Factor, in mathematics is a number or algebraic expression that divides another number or expression evenly\u2014i.e., with no remainder.</p> <p>Properties of a Factor</p> <ol> <li>The number of factors of a number is finite.</li> <li>A factor of a number is always less than or equal to the given number.</li> <li>Every number except 0 and 1 has at least two factors, 1 and itself.</li> <li>Division and multiplication are the operations that are used in finding the factors.</li> </ol> <p>How to Find Factors of a Number?</p> <ul> <li>We can use both \"Division\" to find the factors.   </li> <li>We can use both \"Multiplication\" to find the factors of a given number.   </li> <li>Prime factorizaation      In the exponent form: 108 = 22 \u00d7 33. Add 1 to each of the exponents, 2 and 3, here. Then, 2 + 1 = 3, 3 + 1 = 4.   Multiply these numbers: 3 \u00d7 4 = 12. Thus, Number of factors of 108 is 12. The actual factors of 108 are 1, 2, 3, 4, 6,   9, 12, 18, 27, 36, 54, and 108. Here, 108 has 12 factors and hence our above answer is correct.</li> </ul> <p>Note: <code>Factors Appear in form of Pairs. Even no of Factors cannot be a Perfect Square.</code> </p>"},{"location":"arrays/maths/#problems","title":"Problems","text":"<p>Problem</p> <p>There are 100 doors, all closed. In a nearby cage are 100 monkeys. The first monkey is let out and runs along the doors opening every one. The second monkey is then let out and runs along the doors closing the 2nd, 4th, 6th,\u2026 - all the even-numbered doors. The third monkey is let out. He attends only to the 3rd, 6th, 9th,\u2026 doors (every third door, in other words), closing any that is open and opening any that is closed, and so on. After all 100 monkeys have done their work in this way, what state are the doors in after the last pass?</p> <p>Solution:</p> <p>All Numbers with Perfect Square would be Open. N = 10 {1,4,9,16,25,36,49,64,81,100}</p>"},{"location":"arrays/prefix_sum/","title":"Prefix Sum","text":""},{"location":"arrays/prefix_sum/#arrays-prefix-sum","title":"Arrays - Prefix Sum","text":"<p>Prefix array is a very vital tool in competitive programming. This helps to minimize the repeated calculation done in an array and thus reduces the time complexity of your program.</p> <p>To fill the prefix sum array, we run through index 1 to last and keep on adding the present element with the previous value in the prefix sum array.</p> input numbers 1 2 3 4 5 6 ... prefix sums 1 3 6 10 15 21 ... <pre><code>ps[0]=a[0]\nps[1]=a[0]+a[1]\nps[2]=a[0]+a[1]+a[2]\n</code></pre> <p>OR</p> <pre><code>ps[0]=a[0]\nps[1]=ps[0]+a[1]\nps[2]=ps[1]+a[2]\n\nps[i] = ps[i-1] + a[i]\n</code></pre> <p></p> <ul> <li>Whenever you encounter a problem with range sum use Prefix Sum approach to solve the problem.</li> </ul>"},{"location":"arrays/prefix_sum/#properties","title":"Properties","text":"<p>If the given array A has all non-negative numbers the the prefix array constructed will be sorted in non-descending order.</p>"},{"location":"arrays/prefix_sum/#build-prefix-sum","title":"Build Prefix Sum","text":""},{"location":"arrays/prefix_sum/#problems","title":"Problems","text":"<ul> <li>Given an Array return true if there is an Equillibrium Index in the Array     - Equillibrium Index is the index for which sum of elements on left side = sum of elements on right side     - A: [0, 1, 2, 3, 4, 8, 10]         - 8 is the Equillibrium Index as SumLeft(10) = SumRight(10)     - Brute Force:            - Optimized Approach using Prefix Sum       </li> </ul> <pre><code>// Java Solution\npublic class Solution {\npublic int solve(int[] A) {\nlong sum1 = 0;\nfor (int i = 0; i &lt; A.length; i++) sum1 += A[i];\nlong sum2 = 0;\nint ans = Integer.MAX_VALUE;\nfor (int i = 0; i &lt; A.length; i++) {\nsum1 -= A[i];\nif (sum1 == sum2) {\nans = i;\nbreak;\n}\nsum2 += A[i];\n}\nif (ans == Integer.MAX_VALUE) ans = -1;\nreturn ans;\n}\n}\n</code></pre> <pre><code># Python\n  class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def solve(self, A):\n        n = len(A)\n        summ = 0\n        for i in A:\n            summ += i\n        l = 0\n        for i in range(0, n):\n            summ -= A[i]\n            if l == summ :\n                return i\n            l += A[i]\n        return -1;\n</code></pre> <ul> <li>Count ways to make sum of odd and even indexed elements equal by removing an array element     - Given an array, arr[] of size N, the task is to find the count of array indices such that removing an element from       these indices makes the sum of even-indexed and odd-indexed array elements equal.         - Approach:             - Initialize two variables, say evenSum and oddSum, to store the sum of odd-indexed and even-indexed               elements of the given array respectively.             - Traverse the array using variable i.             - Remove every ith element of the array and update the sum of the remaining even-indexed elements and the               odd-indexed elements based on the above observation. Check if the sums are equal or not.             - If found to be true, then increment the count.             - Finally, print the count obtained.         - Solution</li> </ul> <pre><code>  public class Solution {\n\nprivate int cntIndexesToMakeBalance(int arr[], int n) {\nif (n == 1) {\nreturn 1;\n}\n\nif (n == 2)\nreturn 0;\n\nint sumEven = 0;\nint sumOdd = 0;\n\nfor (int i = 0; i &lt; n; i++) {\nif (i % 2 == 0) {\nsumEven += arr[i];\n} else {\nsumOdd += arr[i];\n}\n}\n\nint currOdd = 0;\nint currEven = arr[0];\nint res = 0;\nint newEvenSum = 0;\nint newOddSum = 0;\n\nfor (int i = 1; i &lt; n - 1; i++) {\nif (i % 2 == 1) {\ncurrOdd += arr[i];\nnewEvenSum = currEven + sumOdd\n- currOdd;\nnewOddSum = currOdd + sumEven\n- currEven - arr[i];\n} else {\ncurrEven += arr[i];\nnewOddSum = currOdd + sumEven\n- currEven;\nnewEvenSum = currEven + sumOdd\n- currOdd - arr[i];\n}\nif (newEvenSum == newOddSum) {\nres++;\n}\n}\nif (sumOdd == sumEven - arr[0]) {\nres++;\n}\nif (n % 2 == 1) {\nif (sumOdd == sumEven - arr[n - 1]) {\nres++;\n}\n} else {\nif (sumEven == sumOdd - arr[n - 1]) {\nres++;\n}\n}\nreturn res;\n}\n\npublic int solve(int[] A) {\nint n = A.length;\nreturn cntIndexesToMakeBalance(A, n);\n}\n}\n</code></pre> <pre><code># Python Solution\nclass Solution:\n    # @param A : list of integers\n    # @return an integer\n    def solve(self, A):\n        n=len(A);\n        if n==1:\n            return 1\n        if n==2:\n            return 0\n        sumEven = 0\n        sumOdd = 0\n        for i in range(n) :\n            if (i % 2 == 0) :\n                sumEven += A[i];\n\n            else :\n                sumOdd += A[i];\n        currOdd = 0\n        currEven = A[0]\n        res = 0\n        newEvenSum = 0\n        newOddSum = 0\n        for i in range(1,n-1):\n            if i%2 :\n                currOdd += A[i]\n                newEvenSum = currEven + sumOdd- currOdd\n                newOddSum = currOdd + sumEven - currEven - A[i]\n            else :\n                currEven += A[i]\n                newOddSum = currOdd + sumEven  - currEven\n                newEvenSum = currEven + sumOdd - currOdd -A[i]\n            if (newEvenSum == newOddSum) :\n                res+=1\n        if (sumOdd == sumEven - A[0]) :\n            res+=1\n        if (n % 2 == 1) :\n            if (sumOdd == sumEven - A[n - 1]) :\n                res+=1\n        else :\n            if (sumEven == sumOdd - A[n - 1]) :\n                res+=1\n        return res\n</code></pre>"},{"location":"arrays/prefix_sum/#creating-prefix-sum-even-and-odd-arrays","title":"Creating Prefix Sum even and Odd Arrays","text":"<ul> <li>If you are removing a element from array and calulating the sum(even) &amp; sum(odd) use this formulae:        - Example:       </li> <li>Given an array count the number of special indexes in the array.     - Special Index: An Index in the array after removing which Sum Indexed Numbers = Sum Indexed Numbers             - Solution"},{"location":"arrays/prefix_sum/#applications","title":"Applications","text":"<ul> <li>Equilibrium index of an array: The equilibrium index of an array is an index such that the sum of elements at   lower indexes is equal to the sum of elements at higher indexes.     - equilibrium-index-of-an-array</li> <li>Find if there is a subarray with 0 sum: Given an array of positive and negative numbers, find if there is a   subarray (of size at least one) with 0 sum.     - find-if-there-is-a-subarray-with-0-sum</li> <li>Maximum subarray size, such that all subarrays of that size have sum less than k: Given an array of n positive   integers and a positive integer k, the task is to find the maximum subarray size such that all subarrays of that size   have the sum of elements less than k.     - maximum-subarray-size-subarrays-size-sum-less-k</li> <li>Find the prime numbers which can written as sum of most consecutive primes: Given an array of limits. For every   limit, find the prime number which can be written as the sum of the most consecutive primes smaller than or equal to   the limit.     - find-prime-number-can-written-sum-consecutive-primes</li> <li>Longest Span with same Sum in two Binary arrays: Given two binary arrays, arr1[] and arr2[] of the same size n.   Find the length of the longest common span (i, j) where j &gt;= i such that arr1[i] + arr1[i+1] + \u2026 + arr1[j] = arr2[i] +   arr2[i+1] + \u2026 + arr2[j].     - longest-span-sum-two-binary-arrays</li> <li>Maximum subarray sum modulo m: Given an array of n elements and an integer m. The task is to find the maximum   value of the sum of its subarray modulo m i.e find the sum of each subarray mod m and print the maximum value of this   modulo operation.     - maximum-subarray-sum-modulo-m</li> <li>Maximum subarray size, such that all subarrays of that size have sum less than k: Given an array of n positive   integers and a positive integer k, the task is to find the maximum subarray size such that all subarrays of that size   have sum of elements less than k.     - maximum-subarray-size-subarrays-size-sum-less-k</li> <li>Maximum occurred integer in n ranges : Given n ranges of the form L and R, the task is to find the maximum   occurring integer in all the ranges. If more than one such integer exits, print the smallest one.     - maximum-occurred-integer-n-ranges</li> <li>Minimum cost for acquiring all coins with k extra coins allowed with every coin: You are given a list of N coins   of different denominations. you can pay an amount equivalent to any 1 coin and can acquire that coin. In addition,   once you have paid for a coin, we can choose at most K more coins and can acquire those for free. The task is to find   the minimum amount required to acquire all the N coins for a given value of K.     - minimum-cost-for-acquiring-all-coins-with-k-extra-coins-allowed-with-every-coin</li> <li>Random number generator in arbitrary probability distribution fashion: Given n numbers, each with some frequency   of occurrence. Return a random number with a probability proportional to its frequency of occurrence.     - random-number-generator-in-arbitrary-probability-distribution-fashion</li> </ul>"},{"location":"arrays/sorting/","title":"Sorting Introduction","text":""},{"location":"arrays/sorting/#sorting","title":"Sorting","text":"<p>Sorting is any process of arranging items systematically</p> <p>In Computer world a Sorting Algorithm is used to rearrange a given array or list elements according to a comparison operator on the elements.</p> <ul> <li>Sorting makes searching<code>(one of most frequent operation)</code> optimised</li> </ul> <p>The comparison operator is used to decide the new order of element in the respective data structure.</p> <p>What is covered here ?</p> <ul> <li>Why Sorting</li> <li>Problems on Sorting</li> <li>Comparator Function</li> </ul> <p>Ascending Order Sort</p> <p>3,7,8,9,11,14</p> <p>Descending Order Sort</p> <p>20,19,14,8,3</p> <p>Sorted by no of factors</p> <p>1,3,9,6,12</p> <p>1 has 1 factor, 2 has 3 factors, 3 has 9 factors ... </p>"},{"location":"arrays/sorting/#how-sorting-happens","title":"How Sorting Happens?","text":"<p>All Sorting algo are comparison based , It compares two elements and swap based on use case.</p> <p></p>"},{"location":"arrays/sorting/#notes","title":"Notes","text":"<ul> <li>TC: O(NLogN)</li> <li>SC: O(1)/O(N) Depends on sorting algorithm</li> </ul>"},{"location":"arrays/sub_arrays/","title":"Sub arrays","text":""},{"location":"arrays/sub_arrays/#arrays-subarrays","title":"Arrays - Subarrays","text":"<p>A subarray is a slice from a contiguous array (i.e., occupy consecutive positions) and inherently maintains the order of elements.</p> <p>Subarrays are arrays within another array.</p> <ul> <li>For example, the subarrays of array {1, 2, 3} are {1}, {1, 2}, {1, 2, 3}, {2}, {2, 3}, and {3}.</li> </ul> <p></p> <p>Note:</p> <ul> <li>No of Sub arrays for a Array of Size N - <code>(N*(N+1))/2</code></li> <li>No of Sub arrays of Size K for a Array of Size N - <code>N-K+1</code></li> </ul>"},{"location":"arrays/sub_arrays/#problem-1-print-all-values-of-a-sub-array","title":"Problem 1 - Print all values of a sub array","text":""},{"location":"arrays/sub_arrays/#problem-2-sum-of-a-given-sub-array","title":"Problem 2 - Sum of a given sub array","text":""},{"location":"arrays/sub_arrays/#problem-3-print-all-sub-arrays-of-a-given-array","title":"Problem 3 - Print all Sub arrays of a Given Array","text":""},{"location":"arrays/sub_arrays/#problem-4-print-sum-of-every-sub-array","title":"Problem 4 - Print Sum of Every Sub array","text":""},{"location":"arrays/sub_arrays/#problem-5-print-sum-of-all-sub-arrays-starting-with-a-given-index","title":"Problem 5 - Print Sum of all Sub arrays starting with a given index","text":""},{"location":"arrays/sub_arrays/#problem-6-given-an-array-find-the-sum-of-all-subarray-sums-important","title":"Problem 6 - Given an Array , Find the sum of all subarray sums. - Important","text":""},{"location":"assets/markdown-cheat-sheet/","title":"Markdown Cheat Sheet","text":""},{"location":"assets/markdown-cheat-sheet/#markdown-cheat-sheet","title":"Markdown Cheat Sheet","text":"<p>Thanks for visiting The Markdown Guide!</p> <p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can\u2019t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax.</p>"},{"location":"assets/markdown-cheat-sheet/#basic-syntax","title":"Basic Syntax","text":"<p>These are the elements outlined in John Gruber\u2019s original design document. All Markdown applications support these elements.</p>"},{"location":"assets/markdown-cheat-sheet/#heading","title":"Heading","text":""},{"location":"assets/markdown-cheat-sheet/#h1","title":"H1","text":""},{"location":"assets/markdown-cheat-sheet/#h2","title":"H2","text":""},{"location":"assets/markdown-cheat-sheet/#h3","title":"H3","text":""},{"location":"assets/markdown-cheat-sheet/#bold","title":"Bold","text":"<p>bold text</p>"},{"location":"assets/markdown-cheat-sheet/#italic","title":"Italic","text":"<p>italicized text</p>"},{"location":"assets/markdown-cheat-sheet/#blockquote","title":"Blockquote","text":"<p>blockquote</p>"},{"location":"assets/markdown-cheat-sheet/#ordered-list","title":"Ordered List","text":"<ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"assets/markdown-cheat-sheet/#unordered-list","title":"Unordered List","text":"<ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul>"},{"location":"assets/markdown-cheat-sheet/#code","title":"Code","text":"<p><code>code</code></p>"},{"location":"assets/markdown-cheat-sheet/#horizontal-rule","title":"Horizontal Rule","text":""},{"location":"assets/markdown-cheat-sheet/#link","title":"Link","text":"<p>Markdown Guide</p>"},{"location":"assets/markdown-cheat-sheet/#image","title":"Image","text":""},{"location":"assets/markdown-cheat-sheet/#extended-syntax","title":"Extended Syntax","text":"<p>These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.</p>"},{"location":"assets/markdown-cheat-sheet/#table","title":"Table","text":"Syntax Description Header Title Paragraph Text"},{"location":"assets/markdown-cheat-sheet/#fenced-code-block","title":"Fenced Code Block","text":"<pre><code>{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n</code></pre>"},{"location":"assets/markdown-cheat-sheet/#footnote","title":"Footnote","text":"<p>Here's a sentence with a footnote. 1</p>"},{"location":"assets/markdown-cheat-sheet/#heading-id","title":"Heading ID","text":""},{"location":"assets/markdown-cheat-sheet/#custom-id","title":"My Great Heading","text":""},{"location":"assets/markdown-cheat-sheet/#definition-list","title":"Definition List","text":"term definition"},{"location":"assets/markdown-cheat-sheet/#strikethrough","title":"Strikethrough","text":"<p>The world is flat.</p>"},{"location":"assets/markdown-cheat-sheet/#task-list","title":"Task List","text":"<ul> <li> Write the press release</li> <li> Update the website</li> <li> Contact the media</li> </ul>"},{"location":"assets/markdown-cheat-sheet/#emoji","title":"Emoji","text":"<p>That is so funny! </p> <p>(See also Copying and Pasting Emoji)</p>"},{"location":"assets/markdown-cheat-sheet/#highlight","title":"Highlight","text":"<p>I need to highlight these very important words.</p>"},{"location":"assets/markdown-cheat-sheet/#subscript","title":"Subscript","text":"<p>H2O</p>"},{"location":"assets/markdown-cheat-sheet/#superscript","title":"Superscript","text":"<p>X2</p>"},{"location":"assets/markdown-cheat-sheet/#cheatsheet","title":"Cheatsheet","text":""},{"location":"assets/markdown-cheat-sheet/#the-last-markdown-editor-ever","title":"The Last Markdown Editor, Ever","text":"<p>MD Cheatsheet is a cloud-enabled, mobile-ready, offline-storage compatible, AngularJS-powered HTML5 Markdown editor.</p> <ul> <li>Type some Markdown on the left</li> <li>See HTML in the right</li> <li>\u2728Magic \u2728</li> </ul>"},{"location":"assets/markdown-cheat-sheet/#features","title":"Features","text":"<ul> <li>Import a HTML file and watch it magically convert to Markdown</li> <li>Drag and drop images (requires your Dropbox account be linked)</li> <li>Import and save files from GitHub, Dropbox, Google Drive and One Drive</li> <li>Drag and drop markdown and HTML files into MD_CHeatsheet</li> <li>Export documents as Markdown, HTML and PDF</li> </ul> <p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site</p> <p>The overriding design goal for Markdown's formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions.</p> <p>This text you see here is *actually- written in Markdown! To get a feel for Markdown's syntax, type some text into the left window and watch the results in the right.</p>"},{"location":"assets/markdown-cheat-sheet/#tech","title":"Tech","text":"<p>Dillinger uses a number of open source projects to work properly:</p> <ul> <li>AngularJS - HTML enhanced for web apps!</li> <li>Ace Editor - awesome web-based text editor</li> <li>markdown-it - Markdown parser done right. Fast and easy to extend.</li> <li>Twitter Bootstrap - great UI boilerplate for modern web apps</li> <li>node.js - evented I/O for the backend</li> <li>Express - fast node.js network app framework @tjholowaychuk</li> <li>Gulp - the streaming build system</li> <li>Breakdance - HTML   to Markdown converter</li> <li>jQuery - duh</li> </ul> <p>And of course Dillinger itself is open source with a public repository on GitHub.</p>"},{"location":"assets/markdown-cheat-sheet/#installation","title":"Installation","text":"<p>Dillinger requires Node.js v10+ to run.</p> <p>Install the dependencies and devDependencies and start the server.</p> <pre><code>cd dillinger\nnpm i\nnode app\n</code></pre> <p>For production environments...</p> <pre><code>npm install --production\nNODE_ENV=production node app\n</code></pre>"},{"location":"assets/markdown-cheat-sheet/#plugins","title":"Plugins","text":"<p>Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.</p> Plugin README Dropbox plugins/dropbox/README.md GitHub plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md"},{"location":"assets/markdown-cheat-sheet/#development","title":"Development","text":"<p>Want to contribute? Great!</p> <p>Dillinger uses Gulp + Webpack for fast developing. Make a change in your file and instantaneously see your updates!</p> <p>Open your favorite Terminal and run these commands.</p> <p>First Tab:</p> <pre><code>node app\n</code></pre> <p>Second Tab:</p> <pre><code>gulp watch\n</code></pre> <p>(optional) Third:</p> <pre><code>karma test\n</code></pre>"},{"location":"assets/markdown-cheat-sheet/#building-for-source","title":"Building for source","text":"<p>For production release:</p> <pre><code>gulp build --prod\n</code></pre> <p>Generating pre-built zip archives for distribution:</p> <pre><code>gulp build dist --prod\n</code></pre>"},{"location":"assets/markdown-cheat-sheet/#docker","title":"Docker","text":"<p>Dillinger is very easy to install and deploy in a Docker container.</p> <p>By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image.</p> <pre><code>cd dillinger\ndocker build -t &lt;youruser&gt;/dillinger:${package.json.version} .\n</code></pre> <p>This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out <code>${package.json.version}</code> with the actual version of Dillinger.</p> <p>Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile):</p> <pre><code>docker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger &lt;youruser&gt;/dillinger:${package.json.version}\n</code></pre> <p>Note: <code>--capt-add=SYS-ADMIN</code> is required for PDF rendering.</p> <p>Verify the deployment by navigating to your server address in your preferred browser.</p> <pre><code>127.0.0.1:8000\n</code></pre>"},{"location":"assets/markdown-cheat-sheet/#license","title":"License","text":"<p>MIT</p> <p>Free Software, Hell Yeah!</p> <ol> <li> <p>This is the footnote.\u00a0\u21a9</p> </li> </ol>"},{"location":"bit-manipulation/bit_manipulation/","title":"Logical Operator","text":""},{"location":"bit-manipulation/bit_manipulation/#bit-manipulation","title":"Bit Manipulation","text":"<p>Operations Performed in Bit that improves execution time as it acts on bits directly.</p>"},{"location":"bit-manipulation/bit_manipulation/#bit-operators","title":"Bit Operators","text":"<ul> <li>AND(&amp;)</li> <li>OR(|)</li> <li>XOR(^)</li> <li>NOT(~)</li> <li>Left Shift (&lt;&lt;)</li> <li>Right Shift (&gt;&gt;)</li> </ul>"},{"location":"bit-manipulation/bit_manipulation/#number-system","title":"Number System","text":"<ul> <li>Decimal Number System (Base - <code>10</code>) [0-9]</li> <li>Octal Number System (Base- <code>8</code>) [0-7]</li> <li>Hexa Decimal Number System (Base - <code>16</code>) [0-9, A-F]</li> <li>Ternary Number System Number System (Base - <code>3</code>) [0-2]</li> <li>Binary Number System (Base - <code>2</code>) [0,1]</li> </ul>"},{"location":"bit-manipulation/bit_manipulation/#decimal-to-binary","title":"Decimal to Binary","text":""},{"location":"bit-manipulation/bit_manipulation/#decimal-addition","title":"Decimal Addition","text":""},{"location":"bit-manipulation/bit_manipulation/#binary-addition","title":"Binary Addition","text":""},{"location":"bit-manipulation/bit_manipulation/#operations","title":"Operations","text":"A B A &amp; B A I B A ^ B 0 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 1 0 A ~A 0 1 1 0"},{"location":"bit-manipulation/bit_manipulation/#notes","title":"Notes","text":""},{"location":"bit-manipulation/bit_manipulation/#xor","title":"XOR","text":"<ul> <li>EvenNum ^ 1 = EvenNum + 1</li> <li>OddNum ^ 1 = OddNum - 1</li> <li>a ^ a = 0</li> </ul>"},{"location":"bit-manipulation/bit_manipulation/#and","title":"AND","text":"<ul> <li>EvenNum &amp; 1 = 0</li> <li>OddNum &amp; 1 = 1</li> <li>a &amp; a = a</li> </ul>"},{"location":"bit-manipulation/bit_manipulation/#or","title":"OR","text":"<ul> <li>EvenNum | 1 = EvenNum + 1</li> <li>OddNum | 1 = OddNum</li> <li>a | a = a</li> </ul>"},{"location":"bit-manipulation/bit_manipulation/#problems-solutions","title":"Problems &amp; Solutions:","text":"<p>Bit Manipulation Problem &amp; Solutions</p>"},{"location":"bit-manipulation/shift_operator/","title":"Shift Operator","text":""},{"location":"bit-manipulation/shift_operator/#left-shift-operator","title":"Left Shift Operator","text":"<ul> <li>Formulae: <code>a &lt;&lt; N</code> = a * 2n     - a <code>-&gt;</code> Input Number     - N <code>-&gt;</code> How many times the number a should be shifted</li> </ul> <pre><code> 1 &lt;&lt; 3 = 1 * 2^3\n2 &lt;&lt; 3 = 2 * 2^3\n2 &lt;&lt; 2 = 2 * 2^2       3 &lt;&lt; 3 = 3 * 2^3\n</code></pre>"},{"location":"bit-manipulation/shift_operator/#right-shift-operator","title":"Right Shift Operator","text":"<ul> <li>Formulae: <code>a &gt;&gt; N</code> = a / 2n     - a <code>-&gt;</code> Input Number     - N <code>-&gt;</code> How many times the number a should be shifted</li> </ul> <pre><code> 1 &gt;&gt; 3 = 1 / 2^3\n2 &gt;&gt; 3 = 2 / 2^3\n2 &gt;&gt; 2 = 2 / 2^2       3 &gt;&gt; 3 = 3 / 2^3\n</code></pre>"},{"location":"bit-manipulation/shift_operator/#tips-tricks","title":"Tips &amp; Tricks","text":"<ul> <li>N &amp; (N-1) Unsets the right most set bit.</li> </ul> <pre><code>  def check_bit_right_shift(num, bit_no)\nreturn (num &gt;&gt; bit_no) &amp; 1 == 1 ? true : false\nend\n\ndef check_bit_left_shift(num, bit_no)\nreturn (num &amp; (1&lt;&lt;bit_no)) != 0 ? true : false\nend\n\ndef set_bit(num, bit_no)\nreturn num | (1 &lt;&lt; bit_no)\nend\n\n# 0^1 = 1\n# 1^0 = 0\ndef toggle_bit(num, bit_no)\nreturn num ^ (1 &lt;&lt; bit_no)\nend\n</code></pre>"},{"location":"bit-manipulation/shift_operator/#problems-solutions","title":"Problems &amp; Solutions:","text":"<p>Bit Manipulation Problem &amp; Solutions</p>"},{"location":"computer_basics/currency_byte_system/","title":"Byte System","text":""},{"location":"computer_basics/currency_byte_system/#byte-system","title":"Byte System","text":"<p>A computer processor is made up of multiple decisive circuits, each one of which may be either OFF or ON. These two states in terms of memory are represented by a 0 or 1. In order to count higher than 1, such bits (BInary digiTS) are suspended together. A group of eight bits is known as a byte. 1 byte can represent numbers between zero (00000000) and 255 ( 11111111), or 28 = 256 distinct positions.</p> <p>These bytes may also be combined to represent larger numbers. The computer represents all characters and numbers internally in the same fashion.</p>"},{"location":"computer_basics/currency_byte_system/#tabular-representation-of-various-memory-sizes","title":"Tabular Representation of various Memory Sizes","text":"Name Equal To Size(In Bytes) Approximation in Power Bit 1 Bit 1/8 - Nibble 4 Bits 1/2 (rare) - Byte 8 Bits 1 10^0 Kilobyte 1024 Bytes 1024 / (2^10) 10^3 Megabyte 1, 024 Kilobytes 1, 048, 576 10^6 Gigabyte 1, 024 Megabytes 1, 073, 741, 824 10^9 Terrabyte 1, 024 Gigabytes 1, 099, 511, 627, 776 10^12 Petabyte 1, 024 Terabytes 1, 125, 899, 906, 842, 624 10^15 Exabyte 1, 024 Petabytes 1, 152, 921, 504, 606, 846, 976 10^18 Zettabyte 1, 024 Exabytes 1, 180, 591, 620, 717, 411, 303, 424 10^21 Yottabyte 1, 024 Zettabytes 1, 208, 925, 819, 614, 629, 174, 706, 176 10^24"},{"location":"computer_basics/currency_byte_system/#currency-system","title":"Currency System","text":"<ul> <li>1 Thousand = 10^3</li> <li>1 Million = 10^6</li> <li>1 Billion = 10^9</li> <li>1 Arab = 10^10</li> <li>1 Kharab = 10^11</li> <li>1 Trillion = 10 ^12</li> </ul> <p>You Must be Knowing this : </p>"},{"location":"computer_basics/terminology/","title":"Computer Basics","text":""},{"location":"computer_basics/terminology/#terminologies","title":"Terminologies","text":""},{"location":"computer_basics/terminology/#computer-registers","title":"Computer Registers","text":"<ul> <li>Registers are a type of computer memory used to quickly accept, store, and transfer data and instructions that are being used immediately by the CPU. The registers used by the CPU are often termed as Processor registers.</li> </ul> <ul> <li>Computer registers are high-speed memory storing units. It is an element of the computer processor.</li> </ul>"},{"location":"computer_basics/terminology/#high-level-programming-language","title":"High-level programming language","text":"<p>In computer science, a high-level programming language is a programming language with strong abstraction from the details of the computer.</p>"},{"location":"computer_basics/terminology/#low-level-programming-language","title":"Low-level programming language","text":"<p>A low-level programming language is a programming language that provides little or no abstraction from a computer's instruction set architecture\u2014commands or functions in the language map that are structurally similar to processor's instructions. Generally, this refers to either machine code or assembly language.</p> <pre><code>8B542408 83FA0077 06B80000 0000C383\nFA027706 B8010000 00C353BB 01000000\nB9010000 008D0419 83FA0376 078BD989\nC14AEBF1 5BC3\n</code></pre>"},{"location":"computer_basics/terminology/#programming-paradigm","title":"Programming Paradigm","text":"<p>Paradigm can also be termed as method to solve some problem or do some task. Programming paradigm is an approach to solve problem using some programming language or also we can say it is a method to solve a problem using tools and techniques that are available to us following some approach.</p> <p></p>"},{"location":"computer_basics/terminology/#mutable-immutable","title":"Mutable &amp; Immutable","text":"<p>Mutable is a fancy way of saying that the internal state of the object is changed/mutated. So, the simplest definition is: An object whose internal state can be changed is mutable. On the other hand, immutable doesn't allow any change in the object once it has been created.</p>"},{"location":"dbms/normalization/","title":"DB Normalization","text":""},{"location":"dbms/normalization/#data-normalization","title":"Data Normalization","text":"<p>DB Normalization is a technique that detects degree of redundancy(needless) of data in a database.</p>"},{"location":"dbms/normalization/#normal-forms","title":"Normal Forms","text":"<ul> <li>1NF (First Normal Form)<ul> <li>Each table cell should contain a single value.</li> <li>Each record needs to be unique.</li> <li>DB should not have multivalued columns    </li> </ul> </li> <li>2NF (Second Normal Form)<ul> <li>Rule 1- Be in 1NF</li> <li>Rule 2- Single Column Primary Key that does not functionally dependant on any subset of candidate key relation</li> <li></li> <li></li> <li>In the above Image the pk for mentor_sessions table is st_id, m_id and s_date and feedback col depends on all pk and m_name only depends on m_id hence its not complying with 2nf.</li> </ul> </li> <li>3NF (Third Normal Form)<ul> <li>Rule 1- Be in 2NF</li> <li>Rule 2- Has no transitive functional dependencies</li> <li></li> <li>Can I find the value of col using Primary Key ? Ask this Question</li> <li>Can I find the value of a col without using Primary Key ? Ask this Question</li> </ul> </li> <li>3.5NF - BCNF (Boyce-Codd Normal Form)</li> <li>4NF (Fourth Normal Form)</li> <li>5NF (Fifth Normal Form)</li> <li>6NF (Sixth Normal Form)</li> </ul>"},{"location":"dbms/normalization/#anomalies","title":"Anomalies","text":"<ul> <li>Update Anomaly   <ul> <li>Data Inconsistency increases if we have duplicate data - A user can enter data with typo.</li> </ul> </li> <li>Insert Anomaly<ul> <li>We cannot insert a record with 0 dependency.</li> <li>E.g If we have Student and Batch in Single table we cannot insert a Batch record with 0 Students</li> </ul> </li> <li>Delete Anomaly   </li> </ul>"},{"location":"hashing/hashing-intro/","title":"Introduction","text":""},{"location":"hashing/hashing-intro/#hashing-introduction","title":"Hashing Introduction","text":"<p>Hashing is the process of converting a given key into another value. A hash function is used to generate the new value according to a mathematical algorithm. The result of a hash function is known as a hash value or simply, a hash.</p> <p>In other words...</p> <p>Hashing is the process of converting a given key into another smaller value for O(1) retrieval time.</p> <p>Hashing is a Concept , <code>Hash Map</code> is one of the Implementation of Hashing.</p> <p></p> <p>A good hash function uses a one-way hashing algorithm, or in other words, the hash cannot be converted back into the original key.</p> <p></p>"},{"location":"hashing/hashing-intro/#hashmap","title":"HashMap","text":"<ul> <li>HashMap class implements the Map interface which allows us to store key and value pair, where keys should be unique.</li> <li>If you try to insert the duplicate key, it will replace the element of the corresponding key. It is easy to perform   operations using the key index like updation, deletion, etc.</li> <li>Points to remember     - HashMap contains values based on the key.     - HashMap contains only unique keys.     - HashMap may have one null key and multiple null values.     - HashMap is non synchronized.     - HashMap maintains no order.     - The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.</li> </ul> <p>Map in different Languages</p> No. Language Map Type Hash Set 1 Java HashMap HashSet 2 Python Dictionary Set 3 C++ Unordered List Unordered set 4 Ruby Hash Set"},{"location":"hashing/hashing-intro/#hashmap-operations","title":"HashMap Operations","text":"<p>All the above Operation is done in Avg Case TC- O(1).</p>"},{"location":"hashing/hashing-intro/#hashset","title":"HashSet","text":"<ul> <li>It Stores only the Uniq Keys</li> <li>In Ruby we call this as Set </li> </ul>"},{"location":"hashing/hashing-intro/#superset-subset","title":"Superset &amp; Subset","text":"<ul> <li>A subset is a set that is made from parts of another set     - Set.new(25..27) &lt;= Set.new(20..30)     - Any Set A is said to be a subset of Set B if every element of A is also an element of B. (A \u2286 B)</li> </ul> <ul> <li>A superset is a set that contains all the elements of another set.</li> <li>You can check if one set is a superset of another     - Set.new(10..40) &gt;= Set.new(20..30)         - The range 10..40 contains 20..30 within     - If A is Subset of B, then B is a SuperSet of A</li> </ul>"},{"location":"hashing/hashing-intro/#references","title":"References","text":"<ul> <li>Hashing Intro - Interview Bit</li> <li>Subsets and Supersets | Set Theory</li> <li>Basic set ops</li> </ul>"},{"location":"lld/design-a-pen/","title":"Design a Pen","text":""},{"location":"lld/design-a-pen/#design-a-pen","title":"Design a pen","text":""},{"location":"lld/design-a-pen/#requirements","title":"Requirements","text":"<ul> <li>A pen is anything that can write.</li> <li>Pen can be Gel, Ball, Fountain, Marker.</li> <li>Ball Pen and Gel Pen have a Ball Pen Refill and a Gel Pen Refill respectively to write.</li> <li>A refil has a tip and an ink.</li> <li>Ink can be of different colour</li> <li>A fountain pen has an Ink.</li> <li>Refil has a radius.</li> <li>For fountain pen, its tip has a radius.</li> <li>Each pen can write in a different way.</li> <li>Some pens write in the same way.</li> <li>Every pen has a brand and a name.</li> <li>Some pens may allow refilling while others might not.</li> </ul> <ol> <li>Yellow - Noun(Entity)</li> <li>Blue -&gt; Verb(behaviour)</li> <li>Green -&gt; Attributes </li> </ol>"},{"location":"lld/design-a-pen/#entities-and-attributes","title":"Entities and Attributes","text":"<ul> <li>Pen<ul> <li>Brand</li> <li>Name</li> <li>Type (Gel, Ball, Fountain, Marker)</li> <li>Price</li> </ul> </li> <li>Refill</li> <li>Type (Ball, Gel)</li> <li>Ink</li> <li>Nib</li> <li>Ink     - Colour     - Brand     - Type (Gel, Ball, Fountain)</li> <li>Nib     - Radius     - Type (Fountain, Ball, Gel)</li> </ul>"},{"location":"lld/design-a-pen/#different-types-of-pens","title":"Different types of pens","text":"<ul> <li>Gel Pen<ul> <li>Type - <code>Gel</code><ul> <li>Refill<ul> <li>Type - <code>Gel</code></li> <li>Nib - <code>Gel</code></li> <li>Ink<ul> <li>Type - <code>Gel</code></li> </ul> </li> <li>Refillable - <code>Yes</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> <ul> <li>Ball Pen<ul> <li>Type - <code>Ball</code></li> <li>Refill<ul> <li>Type - <code>Ball</code></li> <li>Nib - <code>Ball</code></li> <li>Ink<ul> <li>Type - <code>Ball</code></li> </ul> </li> <li>Refillable - <code>Yes</code></li> </ul> </li> </ul> </li> </ul> <ul> <li>Throwaway Pen<ul> <li>Type - <code>Throwaway</code></li> <li>Refill<ul> <li>Type - <code>Ball</code></li> <li>Nib - <code>Ball</code></li> <li>Ink<ul> <li>Type - <code>Ball</code></li> </ul> </li> <li>Refillable - <code>No</code></li> </ul> </li> </ul> </li> </ul> <ul> <li>Fountain Pen<ul> <li>Type - <code>Fountain</code></li> <li>Ink<ul> <li>Type - <code>Fountain</code></li> </ul> </li> <li>NiB<ul> <li>Type - <code>Fountain</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"lld/design-a-pen/#single-class","title":"Single class","text":"<pre><code>classDiagram\n    class Pen {\n        -String brand\n        -String name\n        -PenType type\n        -double price\n        -Refill refill\n        -Ink ink\n        -Nib nib\n        +write() void\n    }\n\n    class PenType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n        FOUNTAIN\n        MARKER\n        THROW_AWAY\n    }\n\n    class Refill {\n        -RefillType type\n        -Ink ink\n        -Nib nib\n        -boolean refillable\n    }\n\n    class RefillType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n    }\n\n    class Ink {\n        -String colour\n        -String brand\n        -InkType type\n    }\n\n    class InkType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n        FOUNTAIN\n    }\n\n    class Nib {\n        -double radius\n        -NibType type\n    }\n\n    class NibType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n        FOUNTAIN\n    }\n\n    Pen \"*\" --o  \"1\" PenType : has a\n    Pen \"1\" --* \"1\" Refill : has a\n    Pen \"1\" --* \"1\" Ink : has a\n    Pen \"1\" --* \"1\" Nib : has a\n\n    Refill \"*\" --* \"1\" RefillType : has a\n    Refill \"1\" --* \"1\" Ink : has a\n    Refill \"1\" --* \"1\" Nib : has a\n\n    Ink \"*\" --* \"1\" InkType : has a\n\n    Nib \"*\" --* \"1\" NibType : has a\n</code></pre>"},{"location":"lld/design-a-pen/#java-code","title":"Java Code","text":"<pre><code>public class Pen {\nprivate String brand;\nprivate String name;\nprivate PenType type;\nprivate double price;\nprivate Refill refill;\nprivate Ink ink;\nprivate Nib nib;\n\npublic void write() {\nswitch (type) {\ncase GEL:\nSystem.out.println(\"Gel Pen writes\");\nbreak;\ncase BALL:\nSystem.out.println(\"Ball Pen writes\");\nbreak;\ncase FOUNTAIN:\nSystem.out.println(\"Fountain Pen writes\");\nbreak;\ncase MARKER:\nSystem.out.println(\"Marker Pen writes\");\nbreak;\ncase THROW_AWAY:\nSystem.out.println(\"Throwaway Pen writes\");\nbreak;\n}\n\nthrow new IllegalArgumentException(\"Invalid Pen Type\");\n}\n\npublic void changeRefill(Refill refill) {\nif (this.refill.isRefillable()) {\nthis.refill = refill;\n}\n}\n\npublic void changeInk(Ink ink) {\nthis.ink = ink;\n}\n}\n</code></pre>"},{"location":"lld/design-a-pen/#problems","title":"Problems","text":"<ul> <li><code>Single Responsibility Principle</code> is violated. There are multiple reasons to change the class such as modifying a single type of pen.</li> <li><code>Open Closed Principle</code> is violated. Adding a new type of pen requires changing the class.</li> <li><code>Null checks</code> are required for handling refill and ink for fountain pens.</li> <li><code>Object creation</code> is complex</li> </ul>"},{"location":"lld/design-a-pen/#multiple-classes-inheritance","title":"Multiple classes (Inheritance)","text":"<pre><code>classDiagram\n    class Pen {\n        &lt;&lt;abstract&gt;&gt;\n        -String brand\n        -String name\n        -PenType type\n        -double price\n        +write()* void\n    }\n\n    class GelPen {\n        -Refill refill\n        +write() void\n    }\n\n    class BallPen {\n        -Refill refill\n        +write() void\n    }\n\n    class FountainPen {\n        -Ink ink\n        +write() void\n    }\n\n    class ThrowawayPen {\n        -Refill refill\n        +write() void\n    }\n\n    class PenType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n        FOUNTAIN\n        MARKER\n        THROW_AWAY\n    }\n\n    class Refill {\n        -RefillType type\n        -Ink ink\n        -Nib nib\n        -boolean refillable\n    }\n\n    class RefillType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n    }\n\n    class Ink {\n        -String colour\n        -String brand\n        -InkType type\n    }\n\n    class InkType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n        FOUNTAIN\n    }\n\n    class Nib {\n        -double radius\n        -NibType type\n    }\n\n    class NibType {\n        &lt;&lt;enumeration&gt;&gt;\n        GEL\n        BALL\n        FOUNTAIN\n    }\n\n    Pen \"*\" --o  \"1\" PenType : has a\n\n\n    Pen &lt;|-- GelPen\n    Pen &lt;|-- BallPen\n    Pen &lt;|-- FountainPen\n    Pen &lt;|-- ThrowawayPen\n\n    GelPen \"1\" --* \"1\" Refill : has a\n    BallPen \"1\" --* \"1\" Refill : has a\n    ThrowawayPen \"1\" --* \"1\" Refill : has a\n\n    FountainPen \"1\" --* \"1\" Ink : has a\n    FountainPen \"1\" --* \"1\" Nib : has a\n\n    Refill \"*\" --* \"1\" RefillType : has a\n    Refill \"1\" --* \"1\" Ink : has a\n    Refill \"1\" --* \"1\" Nib : has a\n\n    Ink \"*\" --* \"1\" InkType : has a\n\n    Nib \"*\" --* \"1\" NibType : has a\n</code></pre>"},{"location":"lld/design-a-pen/#java-code_1","title":"Java Code","text":"<p>Java Code</p>"},{"location":"lld/design-a-pen/#improvements","title":"Improvements","text":"<ul> <li><code>Single Responsibility Principle</code> is followed. Each class has a single responsibility.</li> <li><code>Open Closed Principle</code> is followed. Adding a new type of pen does not require changing the class.</li> <li><code>Null checks</code> are not required for handling refill and ink for fountain pens.</li> </ul>"},{"location":"lld/design-a-pen/#problems_1","title":"Problems","text":"<ul> <li><code>Object creation</code> is still complex</li> <li><code>Liskov Substitution Principle</code> is violated since <code>FountainPen</code> does not have a refill, and it throws an exception when <code>changeRefill</code> is called.</li> <li><code>Code duplication</code></li> <li><code>Subclasses</code> are used to create objects.</li> </ul>"},{"location":"lld/design-a-pen/#reducing-code-duplication-using-strategy-pattern","title":"Reducing code duplication using Strategy Pattern","text":"<pre><code>classDiagram\n    class Pen {\n        &lt;&lt;abstract&gt;&gt;\n        -String brand\n        -String name\n        -PenType type\n        -double price\n        -WritingStrategy writingStrategy\n        +write() void\n        +changeRefill(Refill refill)* void\n    }\n\n    class WritingStrategy {\n        &lt;&lt;interface&gt;&gt;\n        +write() void\n    }\n\n    class SmoothWritingStrategy {\n        +write() void\n    }\n\n    class RoughWritingStrategy {\n        +write() void\n    }\n\n    WritingStrategy &lt;|-- SmoothWritingStrategy\n    WritingStrategy &lt;|-- RoughWritingStrategy\n    Pen \"*\" --o \"1\" WritingStrategy : has a</code></pre>"},{"location":"lld/design-a-pen/#java-code_2","title":"Java Code","text":"<p>Pen class with strategy</p>"},{"location":"lld/design-a-pen/#avoiding-lsp-using-abstract-classes","title":"Avoiding LSP using abstract classes","text":"<pre><code>classDiagram\n    class Pen {\n    &lt;&lt;abstract&gt;&gt;\n    -String brand\n    -String name\n    -PenType type\n    -double price\n    -WritingStrategy writingStrategy\n    +write() void\n}\n\nclass RefillablePen {\n    &lt;&lt;abstract&gt;&gt;\n    -Refill refill\n    +changeRefill(Refill) void\n    +getRefill() Refill\n    +isRefillable() boolean\n}\n\nclass NonRefillablePen {\n    &lt;&lt;abstract&gt;&gt;\n    -Ink ink\n    -Nib nib\n    +changeInk(Ink) void\n}\n\nclass GelPen {\n    +write() void\n    +changeRefill(Refill) void\n    +getRefill() Refill\n    +isRefillable() boolean\n}\n\nclass BallPen {\n    +write() void\n    +changeRefill(Refill) void\n    +getRefill() Refill\n    +isRefillable() boolean\n}\n\nclass FountainPen {\n    +write() void\n}\n\nPen &lt;|-- RefillablePen\nPen &lt;|-- NonRefillablePen\nRefillablePen &lt;|-- GelPen\nRefillablePen &lt;|-- BallPen\nNonRefillablePen &lt;|-- FountainPen\n</code></pre>"},{"location":"lld/design-a-pen/#java-code_3","title":"Java Code","text":"<p>Pen class with abstract classes</p>"},{"location":"lld/design-a-pen/#improvements_1","title":"Improvements","text":"<ul> <li><code>Liskov Substitution Principle</code> is followed since <code>FountainPen</code> does not have a refill, and it throws an exception when <code>changeRefill</code> is called.</li> <li>No field duplication in child classes.</li> </ul>"},{"location":"lld/design-a-pen/#problems_2","title":"Problems","text":"<ul> <li>Behaviour is tied to the class hierarchy. Adding a new type of pen requires changing the class hierarchy.</li> </ul>"},{"location":"lld/design-a-pen/#avoiding-lsp-violation-using-interface","title":"Avoiding LSP violation using interface","text":"<pre><code>classDiagram\n    class Pen {\n        &lt;&lt;abstract&gt;&gt;\n        -String brand\n        -String name\n        -PenType type\n        -double price\n        -WritingStrategy writingStrategy\n        +write() void\n    }\n\n    class RefillPen {\n        &lt;&lt;interface&gt;&gt;\n        +changeRefill(Refill) void\n        +getRefill() Refill\n        +isRefillable() boolean\n    }\n\n    class GelPen {\n        -Refill refill\n        +write() void\n        +changeRefill(Refill) void\n        +getRefill() Refill\n        +isRefillable() boolean\n    }\n\n    class BallPen {\n        -Refill refill\n        +write() void\n        +changeRefill(Refill) void\n        +getRefill() Refill\n        +isRefillable() boolean\n    }\n\n    class FountainPen {\n        -Ink ink\n        -Nib nib\n        +write() void\n    }\n\n    Pen &lt;|-- GelPen : extends\n    Pen &lt;|-- BallPen : extends\n    Pen &lt;|-- FountainPen : extends\n\n    RefillPen &lt;|-- GelPen : implements\n    RefillPen &lt;|-- BallPen : implements</code></pre>"},{"location":"lld/design-a-pen/#java-code_4","title":"Java Code","text":"<p>Pen class with interface</p>"},{"location":"lld/design-a-pen/#problems_3","title":"Problems","text":"<ul> <li>Field duplication in child classes.</li> </ul>"},{"location":"lld/how_to_approach_design_problems/","title":"How to Approach Design Problem","text":""},{"location":"lld/how_to_approach_design_problems/#how-to-approach-design-problems","title":"How to approach Design Problems","text":"<p>Think ---&gt; Document  ---&gt;  Discuss</p>"},{"location":"lld/how_to_approach_design_problems/#development-life-cycle","title":"Development Life Cycle","text":"<ol> <li>Requirement Gathering<ul> <li>Product Manager Gathers this from Business Unit</li> <li>Shared with Technical Team</li> </ul> </li> <li>Technical Design Document<ul> <li>Important Part of Design is Creating UML Diagrams</li> </ul> </li> <li>Implementation<ul> <li>Code</li> <li>Test</li> <li>Deploy</li> <li>Maintain</li> </ul> </li> </ol> <p>While gathering requirements ask question that are required to design the product, avoid asking questions that are features</p> <p>Think is the you dont ask question will the basic product be not built?</p>"},{"location":"lld/how_to_approach_design_problems/#steps","title":"Steps","text":"<ul> <li>Identify the Entities<ul> <li>Identify the noun in Requirements</li> </ul> </li> <li>Identify the Attributes/Functionality<ul> <li>Identify the Verbs</li> </ul> </li> </ul> <ol> <li>One Liner(Problem Statement)</li> <li>Ask Questions<ul> <li>Current Scope</li> <li>Future Scope</li> <li>Behavior    E.g : Tic Tac Toe Questions</li> <li>https://docs.google.com/document/d/1xkdjWaPWqP-3S4pqm87IoPgtJTRp26Aa2soKORGz0zQ/edit</li> <li></li> </ul> </li> <li>Look for:<ul> <li>Entities<ul> <li>Attributes</li> </ul> </li> <li>Verb<ul> <li>Behaviour    </li> </ul> </li> </ul> </li> <li>Tech Design<ul> <li>Create Use Case Diagram (https://www.planttext.com/)</li> </ul> </li> </ol>"},{"location":"loops/","title":"Loop","text":""},{"location":"loops/#loop","title":"Loop","text":"<p>A loop is a sequence of instruction(s) that is continually repeated until a certain condition is reached.</p> <p>An infinite loop is one that lacks a functioning exit routine. </p> <p>The result is that the loop repeats continually until the operating system senses it and terminates the program with an error or until some other event occurs.</p> <p></p>"},{"location":"loops/#types-of-loops","title":"Types of Loops","text":"<ul> <li>Entry Controlled Loop      - In an entry controlled Loop, the control statement is written right at the beginning of the Loop.     - This type of Loop is also called a pre-checking Loop. The conditions in the control statements are checked at first, and only if the conditions are true, the body of the Loop is executed.     - If the condition turns out to be false, the lines of code in the body of the Loop will not be executed.</li> </ul> <ul> <li>Exit Controlled Loop     - In an exit controlled Loop, The control statement is written at the end of the Loop structure.      - The lines of codes in the body of the Loop are executed once before the condition is checked. Hence, this type of Loop is also called a post-checking Loop.   </li> </ul> # Loop Type Description 1 While Loop In while loop, a condition is evaluated before processing a body of the loop. If a condition is true then and only then the body of a loop is executed. 2 Do-While Loop In a do\u2026while loop, the condition is always executed after the body of a loop. It is also called an exit-controlled loop. 3 For...Loop In a for loop, the initial value is performed only once, then the condition tests and compares the counter to a fixed value after each iteration, stopping the for loop when false is returned."},{"location":"loops/recursion/","title":"Recursion","text":""},{"location":"loops/recursion/#recursion","title":"Recursion","text":"<p>The process in which a function calls itself directly or indirectly is called recursion and the corresponding function is called as recursive function.</p> <pre><code>func(x){\n    func(x-1);\n}\n</code></pre>"},{"location":"loops/recursion/#in-other-words","title":"In Other Words","text":"<p>Recursion is the process of repeating items in a self-similar way. In programming languages, if a program allows you to call a function inside the same function, then it is called a recursive call of the function.</p> <p>Recursion is a technique of solving a problem using smaller instances of same problem.</p> <pre><code>Sum of N Natural Numbers \n\nSum(N) = Sum(N-1) + N\n</code></pre> <p>Sum of N Natural Number Recursion Rule </p> <ul> <li>Fibonacci Series </li> </ul> <ul> <li>Tower of Hanoi </li> </ul>"},{"location":"loops/recursion/#when-to-loop-when-to-recurse","title":"When to Loop? When to Recurse?","text":"<p>A loop is used to perform a repetitive block of code as many times as necessary for the program.</p> <p>A big difference between recursion and iteration is the way that they end. While a loop executes the block of code, checking each time to see if it is at the end of the sequence, there is no such sequential end for recursive code.</p>"},{"location":"loops/recursion/#when-should-i-use-recursion","title":"When should I use recursion?","text":"<p>Recursion is made for solving problems that can be broken down into smaller, repetitive problems. It is especially good for working on things that have many possible branches and are too complex for an iterative approach.</p>"},{"location":"loops/recursion/#data-structure-that-requires-knowledge-of-recursion","title":"Data Structure that requires knowledge of recursion","text":"<ul> <li>Merge Sort/Quick Sort</li> <li>Binary Tree/ BST</li> <li>Heaps/ Tries</li> <li>Segment Trees</li> <li>Dynamic Programming</li> <li>Backtracking</li> </ul>"},{"location":"matrix/2d_matrices/","title":"2d matrices","text":""},{"location":"matrix/2d_matrices/#arrays-2d-matrices","title":"Arrays : 2D Matrices","text":"<p>Matrices are series of series of scalars, or series of vectors. In code, they are typically stored as an array of arrays.</p> <pre><code>int matrix[]= new int[3,3]\n\n[\n[1,2,3],\n[4,5,6],\n[7,8,9]\n]\n</code></pre>"},{"location":"matrix/2d_matrices/#scalars","title":"Scalars","text":"<p>Scalars are simply numbers. For example, 2 is a scalar. So is 3.14159 and 1.618. And so is -273.15. Bonus points if you can figure out what those numbers are special for.</p>"},{"location":"matrix/2d_matrices/#vectors","title":"Vectors","text":"<p>Vectors are series of scalars. For example, [1, 3, 5, 7, 9] is a vector. You typically store vectors as an array.</p>"},{"location":"matrix/2d_matrices/#2d-matrix","title":"2D Matrix","text":""},{"location":"matrix/2d_matrices/#problem-1-print-row-wise-sum","title":"Problem 1 - Print Row Wise Sum","text":""},{"location":"matrix/2d_matrices/#problem-2-max-column-sum","title":"Problem 2 - Max Column Sum","text":""},{"location":"matrix/2d_matrices/#problem-3-print-square-matrix-diagonals","title":"Problem 3 - Print Square Matrix Diagonals","text":""},{"location":"matrix/2d_matrices/#problem-4-print-all-diagonals-from-right-left","title":"Problem 4 - Print all Diagonals from Right -&gt; Left","text":"<p>Problem Understanding Observation Solution </p>"},{"location":"matrix/2d_matrices/#transpose-matrix","title":"Transpose Matrix","text":""},{"location":"matrix/2d_matrices/#rotate-matrix","title":"Rotate Matrix","text":"<p>Refer:</p> <p>2D Matrix</p> <p>Rotate Matrix </p> <p>Spiral Array</p>"},{"location":"matrix/2d_matrices/#_1","title":"2d matrices","text":""},{"location":"problem-solving/introduction/","title":"Introduction","text":""},{"location":"problem-solving/introduction/#problem-solving","title":"Problem Solving","text":"<ul> <li>As a Great Problem Solver we need to observe some basic things and optimize the Solution</li> <li>Develop the art of Observation/Intuition.</li> </ul>"},{"location":"problem-solving/introduction/#problems","title":"Problems","text":"<ul> <li>Given a Number check whether it is Prime or not?     - This solution counts the number of factor and then returns true / false       </li> </ul> <pre><code>Any Positive number that has 2 factors, 1 and the number itself\n\n1 is not a Prime Number nor composite number(number having more than 2 factors)\n2 is a Even Prime Number\n\nif a Number a is exactly divisible by number b then we call the b is a factor of a\na*b = N , a and b are factors of N\n\nFactors of a Number always exist in Pair.\n</code></pre> <ul> <li>Sum of N Natural Numbers<ul> <li>(N*(N+1))/2</li> <li></li> <li></li> </ul> </li> </ul>"},{"location":"problem-solving/introduction/#assumptions","title":"Assumptions","text":"<ul> <li>A system can run 108 Iterations in 1 Sec.     - 109 Iterations = ( 1/108) * 109 =&gt; 10 Sec     - 1018 Iterations = 1018/108 = 1010 Sec</li> </ul>"},{"location":"programming-constructs/","title":"Construct Definition","text":""},{"location":"programming-constructs/#program-constructs","title":"Program Constructs","text":"<p>Programs are designed using common building blocks, known as programming constructs. These programming constructs form the basis for all programs.</p>"},{"location":"programming-constructs/#all-programming-language-utilise-program-constructs","title":"All programming language utilise program constructs.","text":"Construct Definition Sequence Sequence is the order in which instructions occur and are processed Selection Selection determine which path a program takes when it is running Iteration Iteration is the repeated execution of a section of code when a program is running Routine Invocation Routine (or procedure) invocation is particular to imperative languages"},{"location":"programming-constructs/repetition/","title":"Iteration","text":""},{"location":"programming-constructs/repetition/#iteration-repetition","title":"Iteration / Repetition","text":"<p>Iteration logic is also known as Loop. Iteration logic is used when one or more instructions may be executed several times depending on some condition.</p> <ul> <li>Iteration comes from the word \u201creiterate\u201d, which means to repeat</li> <li>Iteration is a looping construct</li> <li>Iteration is a combination of decision and sequence and can repeat steps</li> <li>Iteration can be thought of as \u201cwhile something is true, do this, otherwise stop\u201d</li> </ul>"},{"location":"programming-constructs/repetition/#code-logic","title":"Code logic","text":"<ul> <li>for..</li> <li>while..</li> <li>do-while..</li> <li>recursion..</li> <li>anything that loops</li> </ul>"},{"location":"programming-constructs/routine_invocation/","title":"Routine Invocation","text":""},{"location":"programming-constructs/routine_invocation/#routine-invocation","title":"Routine Invocation","text":"<p>When a sequence of statements forms a conceptual unit about which it is possible and useful to think and reason in isolation it is convenient to encapsulate the sequence in a named routine (procedure) and to replace it with a procedure call in the original code.</p> <p>Unlike a goto statement, routine invocation guarantees that the flow of control will eventually return to the point from which the routine was called (the procedure call).</p>"},{"location":"programming-constructs/routine_invocation/#code-logic","title":"Code logic","text":"<ul> <li>MySQL Stored procedure</li> <li>Rake Tasks</li> <li>Background Jobs</li> </ul>"},{"location":"programming-constructs/selection/","title":"Selection","text":""},{"location":"programming-constructs/selection/#selection","title":"Selection","text":"<p>Selection logic, also known as decision logic, is used for making decisions.</p> <p>Selection logic is depicted as either an <code>IF\u2026THEN\u2026ELSE</code> or <code>IF\u2026..THEN</code> structure.</p> <ul> <li>Selection is the decision-making construct.</li> <li>It is used to make yes/no or true/false decisions logically.</li> <li>Selection can be thought of as \u201cif something is true, take this action, otherwise take that action\u201d.</li> </ul> <p> </p>"},{"location":"programming-constructs/sequence/","title":"Sequence","text":""},{"location":"programming-constructs/sequence/#sequence","title":"Sequence","text":"<p>A sequence construct tells the processor which statement is to be executed next.</p> <p>In programming languages, this is the statement following the current statement or first statement in the program. In other words, this is the very basic construct of writing a program. You just write line by line what you have in mind (of-course related to programming).</p> <ul> <li>Sequence is the most basic of the constructs</li> <li>It is simply performing one step after another</li> <li>Each step is followed in a specific sequence, hence the name</li> <li>Sequence can be thought of as \u201cdo this, then do this, then do this\u201d</li> </ul> <p> </p>"},{"location":"search-algorithms/binary-search/","title":"Binary Search","text":""},{"location":"search-algorithms/binary-search/#binary-search","title":"Binary Search","text":"<p>When the list is sorted we can use the binary search technique to find items on the list. </p> <p>In this procedure, the entire list is divided into two sub-lists. If the item is found in the middle position, it returns the location, otherwise jumps to either left or right sub-list and do the same process again until finding the item or exceed the range.</p>"},{"location":"search-algorithms/binary-search/#the-complexity-of-binary-search-technique","title":"The complexity of Binary Search Technique","text":"<p>Time Complexity: O(1) for the best case. O(log2 n) for average or worst case.</p> <p>Space Complexity: O(1)</p> <p>Binary Search Tree, is a node-based binary tree data structure which has the following properties:</p> <ul> <li>The left subtree of a node contains only nodes with keys lesser than the node\u2019s key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node\u2019s key.</li> <li>The left and right subtree each must also be a binary search tree. There must be no duplicate nodes.</li> </ul>"},{"location":"search-algorithms/binary-search/#problem-statement","title":"Problem Statement","text":"<p>Given a Array find the element 2,3,4,5,6 in the Array { 2,3,4,5,6,6 } <pre><code>import java.util.Arrays;\n\npublic class BinarySearch {\npublic static void main(String[] args) {\nint[] array = {2, 3, 4, 5, 6, 6};\nSystem.out.println(binarySearch(array, 2));\nSystem.out.println(binarySearch(array, 3));\nSystem.out.println(binarySearch(array, 4));\nSystem.out.println(binarySearch(array, 5));\nSystem.out.println(binarySearch(array, 6));\n}\n\npublic static int binarySearch(int[] arr, int elem) {\nSystem.out.println(Arrays.toString(arr));\nint result = -1;\nint start = 0;\nint end = arr.length - 1;\n\nwhile (start &lt;= end) {\nint mid = (start + end) / 2;\nif (arr[mid] == elem) {\nreturn mid;\n}\nif (arr[mid] &gt; elem) {\nend = mid - 1;\n}\n\nif (arr[mid] &lt; elem) {\nstart = mid + 1;\n}\n}\nreturn result;\n}\n}\n</code></pre></p>"},{"location":"search-algorithms/linear-search/","title":"Linear Search","text":""},{"location":"search-algorithms/linear-search/#linear-search","title":"Linear Search","text":"<p>A linear search or sequential search is a method for finding an element within a list. This type of searching algorithms sequentially checks each element of the list until a match is found or the whole list has been searched.</p> <p>A linear search runs in at worst linear time and makes at most n comparisons, where n is the length of the list.</p> <p>If each element is equally likely to be searched, then linear search has an average case of <code>n+1/2</code> comparisons, but the average case can be affected if the search probabilities for each element vary.</p>"},{"location":"search-algorithms/linear-search/#linear-search-of-array","title":"Linear search of array","text":""},{"location":"search-algorithms/linear-search/#let-us-understand-this-with-an-example","title":"Let us understand this with an example:","text":"<pre><code>Problem: Given an array arr[] of n elements, write a function to search a given element x in arr[].\n</code></pre> <pre><code>Examples-\n\nInput : arr[] = {10, 20, 80, 30, 60, 50,\n110, 100, 130, 170}\nx = 110;\nOutput : 6\nElement x is present at index 6\n\nInput : arr[] = {10, 20, 80, 30, 60, 50,\n110, 100, 130, 170}\nx = 175;\nOutput : -1\nElement x is not present in arr[].\nA simple approach is to do linear search, i.e\n</code></pre>"},{"location":"search-algorithms/linear-search/#solution","title":"Solution","text":"<p>Start from the leftmost element of arr[] and one by one compare x with each element of arr[] If x matches with an element, return the index. If x doesn\u2019t match with any of elements, return -1. Linear search</p> <p>Example of Linear Search in Java</p> <pre><code>class GFG  {  public static int search(int arr[], int x) {\nint n = arr.length;\nfor(int i = 0; i &lt; n; i++) {\nif(arr[i] == x)\nreturn i;\n}\nreturn -1;\n}\n\npublic static void main(String args[]) {\nint arr[] = { 2, 3, 4, 10, 40 };  int x = 10;\nint result = search(arr, x); if(result == -1) {\nSystem.out.print(\"Element is not present in array\"); }    else {\nSystem.out.print(\"Element is present at index \" + result); }\n}   }\n</code></pre> <p>The time complexity of above algorithm is O(n).</p>"},{"location":"search-algorithms/search/","title":"Search Concept","text":""},{"location":"search-algorithms/search/#searching-techniques","title":"Searching Techniques","text":"<p>Searching Algorithms are designed to check for an element or retrieve an element from any data structure where it is stored.</p> <p>Based on the type of search operation, these algorithms are generally classified into two categories:</p> <ul> <li>Sequential Search (Linear Search)<p></p> </li> </ul> <ul> <li> <p>Interval Search (Binary Search)</p> <p></p> </li> </ul>"},{"location":"search-algorithms/search/#sequential-vs-interval-search","title":"Sequential vs Interval Search","text":""},{"location":"search-algorithms/search/#searching-may-be-sequential-or-not","title":"Searching may be sequential or not","text":"<p>If the data in the dataset are random, then we need to use sequential searching. Otherwise we can use other different techniques to reduce the complexity.</p> Search Type Definition Linear Search  Items are searched one by one Binary Search The entire list is divided into two sub-lists. If the item is found in the middle position, it returns the location, otherwise jumps to either left or right sub-list and do the same process again until finding the item or exceed the range Exponential Search This mechanism is used to find the range where the search key may present Interpolation Search This procedure will try to locate the exact position using interpolation formula Jump Search Jump search technique also works for ordered lists. It creates a block and tries to find the element in that block. If the item is not in the block, it shifts the entire block Ternary Search This procedure divides the list into three parts using two intermediate mid values. As the lists are divided into more subdivisions, so it reduces the time to search a key value."},{"location":"strings/introduction/","title":"Introduction","text":""},{"location":"strings/introduction/#strings","title":"Strings","text":"<p>String is defined as <code>Sequence</code> of characters, <code>Group</code> of characters, <code>Array</code> of characters, <code>List</code> of characters</p> <p>What is a Character? Character is a Datatype which stores data in fixed length field. e.g <code>a</code>, <code>A</code>, <code>z</code>, <code>|</code></p>"},{"location":"strings/introduction/#how-does-computer-stores-strings","title":"How does computer stores strings?","text":"<p>Since computer only understand binary, hence they can only store number, So computers have mapping of character into numbers. </p>"},{"location":"strings/introduction/#mutability","title":"Mutability?","text":"<p>/ liability or tendency to change /</p> <ul> <li>The mutable objects are objects whose value can be changed after initialization.</li> <li>The immutable objects are objects whose value cannot be changed after initialization.</li> </ul> <p>In <code>Java</code> Strings are Immutable, In <code>Ruby</code> Strings are Mutable for version &lt; 3.0</p>"},{"location":"strings/introduction/#why-are-string-objects-immutable","title":"Why are String objects immutable?","text":"<ul> <li>As applications grow, it\u2019s very common for String literals to occupy a large area of memory, which can even cause   redundancy. So, in order to make Java more efficient, the JVM sets aside a special area of memory called the \u201cString   constant pool\u201d.</li> <li>The String constant pool is a special memory area. When we declare a String literal, the JVM creates the object in the   pool and stores its reference on the stack. Before creating each String object in memory, the JVM performs some steps   to decrease the memory overhead.</li> </ul>"},{"location":"strings/introduction/#difference-between-stringbuffer-and-stringbuilder","title":"Difference between StringBuffer and StringBuilder","text":"<p>Java provides three classes to represent a sequence of characters: String, StringBuffer, and StringBuilder. The String class is an immutable class whereas StringBuffer and StringBuilder classes are mutable.</p> No. StringBuffer StringBuilder 1 StringBuffer is synchronized i.e. thread safe. It means two threads can't call the methods of StringBuffer simultaneously. StringBuilder is non-synchronized i.e. not thread safe. It means two threads can call the methods of StringBuilder simultaneously. 2 StringBuffer is less efficient than StringBuilder. StringBuilder is more efficient than StringBuffer. 3 StringBuffer was introduced in Java 1.0 StringBuilder was introduced in Java 1.5"},{"location":"strings/introduction/#tips","title":"Tips","text":"<ul> <li>The difference between Uppercase and lower case character is 32</li> </ul>"},{"location":"strings/introduction/#problems","title":"Problems:","text":"<ul> <li>Given a String, Toggle a case of every characters     - \"abCdeF\" =&gt; \"ABcDEf\"         - Hint: Use Bit manipulation to toggle the bits at 5th place.</li> <li>Given a String Sort the string in Dictonary order     - \"dabaedb\" =&gt; \"aabbdde\"</li> <li>Given a String , Reverse the String</li> <li>Given a String , Reverse the substring from index x till y</li> <li>Given a String , Reverse the String word by word     - \"here is a picture\" =&gt; \"picture a is here\"</li> <li>Given a String find the Longest Palliandromic Substring     - \"abacab\" # O/P -&gt; 5 {bacab}</li> </ul>"},{"location":"strings/introduction/#solutions","title":"Solutions","text":"<ul> <li>String Programs &amp; Code Snippets</li> <li>Practice Problems</li> </ul>"}]}